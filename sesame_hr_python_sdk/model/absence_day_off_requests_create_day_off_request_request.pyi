# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class AbsenceDayOffRequestsCreateDayOffRequestRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "calendarId",
            "employeeId",
            "daysOff",
            "type",
        }
        
        class properties:
            employeeId = schemas.UUIDSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATE(cls):
                    return cls("create")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("delete")
        
            @staticmethod
            def daysOff() -> typing.Type['AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff']:
                return AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff
            absenceTypeId = schemas.UUIDSchema
            comment = schemas.StrSchema
            __annotations__ = {
                "employeeId": employeeId,
                "type": type,
                "daysOff": daysOff,
                "absenceTypeId": absenceTypeId,
                "comment": comment,
            }
    
    calendarId: schemas.AnyTypeSchema
    employeeId: MetaOapg.properties.employeeId
    daysOff: 'AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff'
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysOff"]) -> 'AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["absenceTypeId"]) -> MetaOapg.properties.absenceTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "type", "daysOff", "absenceTypeId", "comment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysOff"]) -> 'AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["absenceTypeId"]) -> typing.Union[MetaOapg.properties.absenceTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "type", "daysOff", "absenceTypeId", "comment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        calendarId: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, uuid.UUID, ],
        daysOff: 'AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff',
        type: typing.Union[MetaOapg.properties.type, str, ],
        absenceTypeId: typing.Union[MetaOapg.properties.absenceTypeId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbsenceDayOffRequestsCreateDayOffRequestRequest':
        return super().__new__(
            cls,
            *args,
            calendarId=calendarId,
            employeeId=employeeId,
            daysOff=daysOff,
            type=type,
            absenceTypeId=absenceTypeId,
            comment=comment,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.absence_day_off_requests_create_day_off_request_request_days_off import AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOff
