# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def employee() -> typing.Type['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee']:
                return EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee
        
            @staticmethod
            def office() -> typing.Type['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice']:
                return EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice
            createdAt = schemas.StrSchema
            updatedAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "employee": employee,
                "office": office,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee"]) -> 'EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["office"]) -> 'EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "employee", "office", "createdAt", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee"]) -> typing.Union['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["office"]) -> typing.Union['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "employee", "office", "createdAt", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        employee: typing.Union['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee', schemas.Unset] = schemas.unset,
        office: typing.Union['EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice', schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            employee=employee,
            office=office,
            createdAt=createdAt,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.employee_office_assignations_assign_employee_to_office_response_data_employee import EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataEmployee
from sesame_hr_python_sdk.model.employee_office_assignations_assign_employee_to_office_response_data_office import EmployeeOfficeAssignationsAssignEmployeeToOfficeResponseDataOffice
