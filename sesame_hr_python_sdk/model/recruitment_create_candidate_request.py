# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class RecruitmentCreateCandidateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "firstName",
            "lastName",
            "phone",
            "appliedAt",
            "email",
            "vacancyId",
        }
        
        class properties:
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            email = schemas.StrSchema
            phone = schemas.StrSchema
            vacancyId = schemas.UUIDSchema
            linkedinURL = schemas.StrSchema
            desiredSalary = schemas.StrSchema
            startWorkDate = schemas.StrSchema
            web = schemas.StrSchema
            location = schemas.StrSchema
            statusId = schemas.UUIDSchema
            __annotations__ = {
                "firstName": firstName,
                "lastName": lastName,
                "email": email,
                "phone": phone,
                "vacancyId": vacancyId,
                "linkedinURL": linkedinURL,
                "desiredSalary": desiredSalary,
                "startWorkDate": startWorkDate,
                "web": web,
                "location": location,
                "statusId": statusId,
            }
    
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    phone: MetaOapg.properties.phone
    appliedAt: schemas.AnyTypeSchema
    email: MetaOapg.properties.email
    vacancyId: MetaOapg.properties.vacancyId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vacancyId"]) -> MetaOapg.properties.vacancyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedinURL"]) -> MetaOapg.properties.linkedinURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desiredSalary"]) -> MetaOapg.properties.desiredSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startWorkDate"]) -> MetaOapg.properties.startWorkDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web"]) -> MetaOapg.properties.web: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> MetaOapg.properties.statusId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "email", "phone", "vacancyId", "linkedinURL", "desiredSalary", "startWorkDate", "web", "location", "statusId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vacancyId"]) -> MetaOapg.properties.vacancyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedinURL"]) -> typing.Union[MetaOapg.properties.linkedinURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desiredSalary"]) -> typing.Union[MetaOapg.properties.desiredSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startWorkDate"]) -> typing.Union[MetaOapg.properties.startWorkDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web"]) -> typing.Union[MetaOapg.properties.web, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union[MetaOapg.properties.statusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "email", "phone", "vacancyId", "linkedinURL", "desiredSalary", "startWorkDate", "web", "location", "statusId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        appliedAt: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        vacancyId: typing.Union[MetaOapg.properties.vacancyId, str, uuid.UUID, ],
        linkedinURL: typing.Union[MetaOapg.properties.linkedinURL, str, schemas.Unset] = schemas.unset,
        desiredSalary: typing.Union[MetaOapg.properties.desiredSalary, str, schemas.Unset] = schemas.unset,
        startWorkDate: typing.Union[MetaOapg.properties.startWorkDate, str, schemas.Unset] = schemas.unset,
        web: typing.Union[MetaOapg.properties.web, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        statusId: typing.Union[MetaOapg.properties.statusId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecruitmentCreateCandidateRequest':
        return super().__new__(
            cls,
            *args,
            firstName=firstName,
            lastName=lastName,
            phone=phone,
            appliedAt=appliedAt,
            email=email,
            vacancyId=vacancyId,
            linkedinURL=linkedinURL,
            desiredSalary=desiredSalary,
            startWorkDate=startWorkDate,
            web=web,
            location=location,
            statusId=statusId,
            _configuration=_configuration,
            **kwargs,
        )
