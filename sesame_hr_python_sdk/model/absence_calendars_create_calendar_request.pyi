# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class AbsenceCalendarsCreateCalendarRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "absenceTypeId",
            "year",
            "employeeId",
            "daysOff",
        }
        
        class properties:
            employeeId = schemas.UUIDSchema
            absenceTypeId = schemas.UUIDSchema
            year = schemas.IntSchema
        
            @staticmethod
            def daysOff() -> typing.Type['AbsenceCalendarsCreateCalendarRequestDaysOff']:
                return AbsenceCalendarsCreateCalendarRequestDaysOff
            __annotations__ = {
                "employeeId": employeeId,
                "absenceTypeId": absenceTypeId,
                "year": year,
                "daysOff": daysOff,
            }
    
    absenceTypeId: MetaOapg.properties.absenceTypeId
    year: MetaOapg.properties.year
    employeeId: MetaOapg.properties.employeeId
    daysOff: 'AbsenceCalendarsCreateCalendarRequestDaysOff'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["absenceTypeId"]) -> MetaOapg.properties.absenceTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysOff"]) -> 'AbsenceCalendarsCreateCalendarRequestDaysOff': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "absenceTypeId", "year", "daysOff", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["absenceTypeId"]) -> MetaOapg.properties.absenceTypeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysOff"]) -> 'AbsenceCalendarsCreateCalendarRequestDaysOff': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "absenceTypeId", "year", "daysOff", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        absenceTypeId: typing.Union[MetaOapg.properties.absenceTypeId, str, uuid.UUID, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, uuid.UUID, ],
        daysOff: 'AbsenceCalendarsCreateCalendarRequestDaysOff',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbsenceCalendarsCreateCalendarRequest':
        return super().__new__(
            cls,
            *args,
            absenceTypeId=absenceTypeId,
            year=year,
            employeeId=employeeId,
            daysOff=daysOff,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.absence_calendars_create_calendar_request_days_off import AbsenceCalendarsCreateCalendarRequestDaysOff
