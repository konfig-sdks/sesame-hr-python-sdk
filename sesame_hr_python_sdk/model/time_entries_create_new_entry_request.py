# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class TimeEntriesCreateNewEntryRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "employeeId",
            "timeEntryIn",
        }
        
        class properties:
            employeeId = schemas.UUIDSchema
            
            
            class timeEntryIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        date = schemas.StrSchema
                        
                        
                        class coordinates(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    latitude = schemas.Float32Schema
                                    longitude = schemas.Float32Schema
                                    __annotations__ = {
                                        "latitude": latitude,
                                        "longitude": longitude,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'coordinates':
                                return super().__new__(
                                    cls,
                                    *args,
                                    latitude=latitude,
                                    longitude=longitude,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "date": date,
                            "coordinates": coordinates,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                    coordinates: typing.Union[MetaOapg.properties.coordinates, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timeEntryIn':
                    return super().__new__(
                        cls,
                        *args,
                        date=date,
                        coordinates=coordinates,
                        _configuration=_configuration,
                        **kwargs,
                    )
            projectId = schemas.UUIDSchema
        
            @staticmethod
            def tagIds() -> typing.Type['TimeEntriesCreateNewEntryRequestTagIds']:
                return TimeEntriesCreateNewEntryRequestTagIds
            comment = schemas.StrSchema
            
            
            class timeEntryOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        date = schemas.StrSchema
                        
                        
                        class coordinates(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    latitude = schemas.Float32Schema
                                    longitude = schemas.Float32Schema
                                    __annotations__ = {
                                        "latitude": latitude,
                                        "longitude": longitude,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'coordinates':
                                return super().__new__(
                                    cls,
                                    *args,
                                    latitude=latitude,
                                    longitude=longitude,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "date": date,
                            "coordinates": coordinates,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                    coordinates: typing.Union[MetaOapg.properties.coordinates, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timeEntryOut':
                    return super().__new__(
                        cls,
                        *args,
                        date=date,
                        coordinates=coordinates,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "employeeId": employeeId,
                "timeEntryIn": timeEntryIn,
                "projectId": projectId,
                "tagIds": tagIds,
                "comment": comment,
                "timeEntryOut": timeEntryOut,
            }
    
    employeeId: MetaOapg.properties.employeeId
    timeEntryIn: MetaOapg.properties.timeEntryIn
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeEntryIn"]) -> MetaOapg.properties.timeEntryIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagIds"]) -> 'TimeEntriesCreateNewEntryRequestTagIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeEntryOut"]) -> MetaOapg.properties.timeEntryOut: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "timeEntryIn", "projectId", "tagIds", "comment", "timeEntryOut", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeEntryIn"]) -> MetaOapg.properties.timeEntryIn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagIds"]) -> typing.Union['TimeEntriesCreateNewEntryRequestTagIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeEntryOut"]) -> typing.Union[MetaOapg.properties.timeEntryOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "timeEntryIn", "projectId", "tagIds", "comment", "timeEntryOut", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, uuid.UUID, ],
        timeEntryIn: typing.Union[MetaOapg.properties.timeEntryIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        projectId: typing.Union[MetaOapg.properties.projectId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        tagIds: typing.Union['TimeEntriesCreateNewEntryRequestTagIds', schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        timeEntryOut: typing.Union[MetaOapg.properties.timeEntryOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeEntriesCreateNewEntryRequest':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            timeEntryIn=timeEntryIn,
            projectId=projectId,
            tagIds=tagIds,
            comment=comment,
            timeEntryOut=timeEntryOut,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.time_entries_create_new_entry_request_tag_ids import TimeEntriesCreateNewEntryRequestTagIds
