# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class ProjectsUpdateProjectByIdResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            id = schemas.UUIDSchema
            name = schemas.StrSchema
        
            @staticmethod
            def parentProject() -> typing.Type['ProjectsUpdateProjectByIdResponseDataParentProject']:
                return ProjectsUpdateProjectByIdResponseDataParentProject
        
            @staticmethod
            def customer() -> typing.Type['ProjectsUpdateProjectByIdResponseDataCustomer']:
                return ProjectsUpdateProjectByIdResponseDataCustomer
            price = schemas.Float32Schema
            startDate = schemas.DateSchema
            endDate = schemas.DateSchema
        
            @staticmethod
            def manager() -> typing.Type['ProjectsUpdateProjectByIdResponseDataManager']:
                return ProjectsUpdateProjectByIdResponseDataManager
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "active": "ACTIVE",
                        "inactive": "INACTIVE",
                        "paused": "PAUSED",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
                
                @schemas.classproperty
                def PAUSED(cls):
                    return cls("paused")
            __annotations__ = {
                "description": description,
                "id": id,
                "name": name,
                "parentProject": parentProject,
                "customer": customer,
                "price": price,
                "startDate": startDate,
                "endDate": endDate,
                "manager": manager,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentProject"]) -> 'ProjectsUpdateProjectByIdResponseDataParentProject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'ProjectsUpdateProjectByIdResponseDataCustomer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manager"]) -> 'ProjectsUpdateProjectByIdResponseDataManager': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "parentProject", "customer", "price", "startDate", "endDate", "manager", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentProject"]) -> typing.Union['ProjectsUpdateProjectByIdResponseDataParentProject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['ProjectsUpdateProjectByIdResponseDataCustomer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manager"]) -> typing.Union['ProjectsUpdateProjectByIdResponseDataManager', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "parentProject", "customer", "price", "startDate", "endDate", "manager", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        parentProject: typing.Union['ProjectsUpdateProjectByIdResponseDataParentProject', schemas.Unset] = schemas.unset,
        customer: typing.Union['ProjectsUpdateProjectByIdResponseDataCustomer', schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        manager: typing.Union['ProjectsUpdateProjectByIdResponseDataManager', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectsUpdateProjectByIdResponseData':
        return super().__new__(
            cls,
            *args,
            description=description,
            id=id,
            name=name,
            parentProject=parentProject,
            customer=customer,
            price=price,
            startDate=startDate,
            endDate=endDate,
            manager=manager,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.projects_update_project_by_id_response_data_customer import ProjectsUpdateProjectByIdResponseDataCustomer
from sesame_hr_python_sdk.model.projects_update_project_by_id_response_data_manager import ProjectsUpdateProjectByIdResponseDataManager
from sesame_hr_python_sdk.model.projects_update_project_by_id_response_data_parent_project import ProjectsUpdateProjectByIdResponseDataParentProject
