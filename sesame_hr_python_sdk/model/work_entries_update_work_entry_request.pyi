# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class WorkEntriesUpdateWorkEntryRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "workEntryType",
            "employeeId",
            "workEntryIn",
        }
        
        class properties:
            workEntryType = schemas.StrSchema
            
            
            class workEntryIn(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        date = schemas.StrSchema
                        
                        
                        class coordinates(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    latitude = schemas.Float32Schema
                                    longitude = schemas.Float32Schema
                                    __annotations__ = {
                                        "latitude": latitude,
                                        "longitude": longitude,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'coordinates':
                                return super().__new__(
                                    cls,
                                    *args,
                                    latitude=latitude,
                                    longitude=longitude,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "date": date,
                            "coordinates": coordinates,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                    coordinates: typing.Union[MetaOapg.properties.coordinates, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'workEntryIn':
                    return super().__new__(
                        cls,
                        *args,
                        date=date,
                        coordinates=coordinates,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class workEntryOut(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        date = schemas.StrSchema
                        
                        
                        class coordinates(
                            schemas.AnyTypeSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    latitude = schemas.Float32Schema
                                    longitude = schemas.Float32Schema
                                    __annotations__ = {
                                        "latitude": latitude,
                                        "longitude": longitude,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latitude", "longitude", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'coordinates':
                                return super().__new__(
                                    cls,
                                    *args,
                                    latitude=latitude,
                                    longitude=longitude,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "date": date,
                            "coordinates": coordinates,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> MetaOapg.properties.coordinates: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union[MetaOapg.properties.coordinates, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "coordinates", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                    coordinates: typing.Union[MetaOapg.properties.coordinates, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'workEntryOut':
                    return super().__new__(
                        cls,
                        *args,
                        date=date,
                        coordinates=coordinates,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "workEntryType": workEntryType,
                "workEntryIn": workEntryIn,
                "workEntryOut": workEntryOut,
            }
    
    workEntryType: MetaOapg.properties.workEntryType
    employeeId: schemas.AnyTypeSchema
    workEntryIn: MetaOapg.properties.workEntryIn
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEntryType"]) -> MetaOapg.properties.workEntryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEntryIn"]) -> MetaOapg.properties.workEntryIn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEntryOut"]) -> MetaOapg.properties.workEntryOut: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workEntryType", "workEntryIn", "workEntryOut", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEntryType"]) -> MetaOapg.properties.workEntryType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEntryIn"]) -> MetaOapg.properties.workEntryIn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEntryOut"]) -> typing.Union[MetaOapg.properties.workEntryOut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workEntryType", "workEntryIn", "workEntryOut", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        workEntryType: typing.Union[MetaOapg.properties.workEntryType, str, ],
        employeeId: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        workEntryIn: typing.Union[MetaOapg.properties.workEntryIn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        workEntryOut: typing.Union[MetaOapg.properties.workEntryOut, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkEntriesUpdateWorkEntryRequest':
        return super().__new__(
            cls,
            *args,
            workEntryType=workEntryType,
            employeeId=employeeId,
            workEntryIn=workEntryIn,
            workEntryOut=workEntryOut,
            _configuration=_configuration,
            **kwargs,
        )
