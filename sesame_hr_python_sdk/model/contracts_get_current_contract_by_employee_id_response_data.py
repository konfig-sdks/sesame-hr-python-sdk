# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sesame_hr_python_sdk import schemas  # noqa: F401


class ContractsGetCurrentContractByEmployeeIdResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            status = schemas.StrSchema
        
            @staticmethod
            def jobCharge() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge
        
            @staticmethod
            def workdayType() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType
        
            @staticmethod
            def contractType() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataContractType']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataContractType
        
            @staticmethod
            def degree() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataDegree']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataDegree
            agreement = schemas.StrSchema
            startAt = schemas.StrSchema
            endAt = schemas.StrSchema
            comment = schemas.StrSchema
        
            @staticmethod
            def trialPeriod() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod
            code = schemas.StrSchema
            socialSecurityNumber = schemas.StrSchema
        
            @staticmethod
            def holidays() -> typing.Type['ContractsGetCurrentContractByEmployeeIdResponseDataHolidays']:
                return ContractsGetCurrentContractByEmployeeIdResponseDataHolidays
            __annotations__ = {
                "id": id,
                "status": status,
                "jobCharge": jobCharge,
                "workdayType": workdayType,
                "contractType": contractType,
                "degree": degree,
                "agreement": agreement,
                "startAt": startAt,
                "endAt": endAt,
                "comment": comment,
                "trialPeriod": trialPeriod,
                "code": code,
                "socialSecurityNumber": socialSecurityNumber,
                "holidays": holidays,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCharge"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workdayType"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractType"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataContractType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["degree"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataDegree': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agreement"]) -> MetaOapg.properties.agreement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startAt"]) -> MetaOapg.properties.startAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endAt"]) -> MetaOapg.properties.endAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trialPeriod"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["socialSecurityNumber"]) -> MetaOapg.properties.socialSecurityNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holidays"]) -> 'ContractsGetCurrentContractByEmployeeIdResponseDataHolidays': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "jobCharge", "workdayType", "contractType", "degree", "agreement", "startAt", "endAt", "comment", "trialPeriod", "code", "socialSecurityNumber", "holidays", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCharge"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workdayType"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractType"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataContractType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["degree"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataDegree', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agreement"]) -> typing.Union[MetaOapg.properties.agreement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startAt"]) -> typing.Union[MetaOapg.properties.startAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endAt"]) -> typing.Union[MetaOapg.properties.endAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trialPeriod"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["socialSecurityNumber"]) -> typing.Union[MetaOapg.properties.socialSecurityNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holidays"]) -> typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataHolidays', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "jobCharge", "workdayType", "contractType", "degree", "agreement", "startAt", "endAt", "comment", "trialPeriod", "code", "socialSecurityNumber", "holidays", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        jobCharge: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge', schemas.Unset] = schemas.unset,
        workdayType: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType', schemas.Unset] = schemas.unset,
        contractType: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataContractType', schemas.Unset] = schemas.unset,
        degree: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataDegree', schemas.Unset] = schemas.unset,
        agreement: typing.Union[MetaOapg.properties.agreement, str, schemas.Unset] = schemas.unset,
        startAt: typing.Union[MetaOapg.properties.startAt, str, schemas.Unset] = schemas.unset,
        endAt: typing.Union[MetaOapg.properties.endAt, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        trialPeriod: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod', schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        socialSecurityNumber: typing.Union[MetaOapg.properties.socialSecurityNumber, str, schemas.Unset] = schemas.unset,
        holidays: typing.Union['ContractsGetCurrentContractByEmployeeIdResponseDataHolidays', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractsGetCurrentContractByEmployeeIdResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            status=status,
            jobCharge=jobCharge,
            workdayType=workdayType,
            contractType=contractType,
            degree=degree,
            agreement=agreement,
            startAt=startAt,
            endAt=endAt,
            comment=comment,
            trialPeriod=trialPeriod,
            code=code,
            socialSecurityNumber=socialSecurityNumber,
            holidays=holidays,
            _configuration=_configuration,
            **kwargs,
        )

from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_contract_type import ContractsGetCurrentContractByEmployeeIdResponseDataContractType
from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_degree import ContractsGetCurrentContractByEmployeeIdResponseDataDegree
from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_holidays import ContractsGetCurrentContractByEmployeeIdResponseDataHolidays
from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_job_charge import ContractsGetCurrentContractByEmployeeIdResponseDataJobCharge
from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_trial_period import ContractsGetCurrentContractByEmployeeIdResponseDataTrialPeriod
from sesame_hr_python_sdk.model.contracts_get_current_contract_by_employee_id_response_data_workday_type import ContractsGetCurrentContractByEmployeeIdResponseDataWorkdayType
