# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from sesame_hr_python_sdk.pydantic.recruitment_update_candidate_response_data_status import RecruitmentUpdateCandidateResponseDataStatus
from sesame_hr_python_sdk.pydantic.recruitment_update_candidate_response_data_vacancy import RecruitmentUpdateCandidateResponseDataVacancy

class RecruitmentUpdateCandidateResponseData(BaseModel):
    id: typing.Optional[str] = Field(None, alias='id')

    company_id: typing.Optional[str] = Field(None, alias='companyId')

    vacancy: typing.Optional[RecruitmentUpdateCandidateResponseDataVacancy] = Field(None, alias='vacancy')

    vacancy_id: typing.Optional[str] = Field(None, alias='vacancyId')

    first_name: typing.Optional[str] = Field(None, alias='firstName')

    last_name: typing.Optional[str] = Field(None, alias='lastName')

    email: typing.Optional[str] = Field(None, alias='email')

    phone: typing.Optional[str] = Field(None, alias='phone')

    type: typing.Optional[str] = Field(None, alias='type')

    status_id: typing.Optional[str] = Field(None, alias='statusId')

    status: typing.Optional[RecruitmentUpdateCandidateResponseDataStatus] = Field(None, alias='status')

    linked_in_u_r_l: typing.Optional[str] = Field(None, alias='linkedInURL')

    desired_salary: typing.Optional[str] = Field(None, alias='desiredSalary')

    start_work_date: typing.Optional[str] = Field(None, alias='startWorkDate')

    evaluation: typing.Optional[int] = Field(None, alias='evaluation')

    web: typing.Optional[str] = Field(None, alias='web')

    location: typing.Optional[str] = Field(None, alias='location')

    has_document: typing.Optional[bool] = Field(None, alias='hasDocument')

    comment: typing.Optional[str] = Field(None, alias='comment')

    applied_at: typing.Optional[str] = Field(None, alias='appliedAt')

    thread_id: typing.Optional[str] = Field(None, alias='threadId')

    last_comment: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='lastComment')

    num_comments: typing.Optional[int] = Field(None, alias='numComments')

    image_profile_u_r_l: typing.Optional[str] = Field(None, alias='imageProfileURL')

    checklist: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='checklist')

    created_at: typing.Optional[str] = Field(None, alias='createdAt')

    updated_at: typing.Optional[str] = Field(None, alias='updatedAt')

    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
