# coding: utf-8

"""
    Sesame Public API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from sesame_hr_python_sdk.pydantic.employees_update_by_id_request_custom_fields import EmployeesUpdateByIdRequestCustomFields

class EmployeesUpdateByIdRequest(BaseModel):
    # The first name of the employee
    first_name: str = Field(alias='firstName')

    # The last name of the employee
    last_name: str = Field(alias='lastName')

    status: Literal["active", "inactive"] = Field(alias='status')

    description: typing.Optional[str] = Field(None, alias='description')

    gender: typing.Optional[Literal["female", "male", "no_response"]] = Field(None, alias='gender')

    # The email for the employee access and notifications (required if invitation is true)
    email: typing.Optional[str] = Field(None, alias='email')

    # The identifier of your internal employee contract
    contract_id: typing.Optional[str] = Field(None, alias='contractId')

    # The code of the employee
    code: typing.Optional[int] = Field(None, alias='code')

    # The pin of the employee
    pin: typing.Optional[int] = Field(None, alias='pin')

    # The National Identity Document of the employee
    nid: typing.Optional[str] = Field(None, alias='nid')

    identity_number_type: typing.Optional[Literal["dni", "nie", "rut", "other"]] = Field(None, alias='identityNumberType')

    # The Social Security Number of the employee
    ssn: typing.Optional[str] = Field(None, alias='ssn')

    phone: typing.Optional[str] = Field(None, alias='phone')

    date_of_birth: typing.Optional[date] = Field(None, alias='dateOfBirth')

    custom_fields: typing.Optional[EmployeesUpdateByIdRequestCustomFields] = Field(None, alias='customFields')

    nationality: typing.Optional[str] = Field(None, alias='nationality')

    marital_status: typing.Optional[str] = Field(None, alias='maritalStatus')

    address: typing.Optional[str] = Field(None, alias='address')

    postal_code: typing.Optional[str] = Field(None, alias='postalCode')

    emergency_phone: typing.Optional[str] = Field(None, alias='emergencyPhone')

    children_count: typing.Optional[int] = Field(None, alias='childrenCount')

    disability: typing.Optional[int] = Field(None, alias='disability')

    personal_email: typing.Optional[str] = Field(None, alias='personalEmail')

    city: typing.Optional[str] = Field(None, alias='city')

    province: typing.Optional[str] = Field(None, alias='province')

    country: typing.Optional[str] = Field(None, alias='country')

    salary_range: typing.Optional[str] = Field(None, alias='salaryRange')

    study_level: typing.Optional[str] = Field(None, alias='studyLevel')

    professional_category_code: typing.Optional[str] = Field(None, alias='professionalCategoryCode')

    professional_category_description: typing.Optional[str] = Field(None, alias='professionalCategoryDescription')

    bic: typing.Optional[str] = Field(None, alias='bic')

    account_number: typing.Optional[str] = Field(None, alias='accountNumber')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
